/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id("buildlogic.kotlin-library-conventions")
    id("org.jooq.jooq-codegen-gradle") version "3.19.10"
}

tasks.named<Jar>("jar") { archiveFileName.set("example-domain-infrastructure.jar") }

tasks.named("compileKotlin") {
    dependsOn(tasks.named("jooqCodegen"))
}

jooq {
    configuration {
        generator {
            name = "org.jooq.codegen.KotlinGenerator"
            generate {
                isKotlinNotNullPojoAttributes = true
                isKotlinNotNullRecordAttributes = true
                isKotlinNotNullInterfaceAttributes = true
            }
            database {
                name = "org.jooq.meta.extensions.ddl.DDLDatabase"

                properties {

                    // Specify the location of your SQL script.
                    // You may use ant-style file matching, e.g. /path/**/to/*.sql
                    //
                    // Where:
                    // - ** matches any directory subtree
                    // - * matches any number of characters in a directory / file name
                    // - ? matches a single character in a directory / file name
                    property {
                        key = "scripts"
                        value = "src/main/resources/db/migration/*.sql"
                    }

                    // The sort order of the scripts within a directory, where:
                    //
                    // - semantic: sorts versions, e.g. v-3.10.0 is after v-3.9.0 (default)
                    // - alphanumeric: sorts strings, e.g. v-3.10.0 is before v-3.9.0
                    // - flyway: sorts files the same way as flyway does
                    // - none: doesn't sort directory contents after fetching them from the directory
                    property {
                        key = "sort"
                        value = "flyway"
                    }

                    // The default schema for unqualified objects:
                    //
                    // - public: all unqualified objects are located in the PUBLIC (upper case) schema
                    // - none: all unqualified objects are located in the default schema (default)
                    //
                    // This configuration can be overridden with the schema mapping feature
                    property {
                        key = "unqualifiedSchema"
                        value = "none"
                    }

                    // The default name case for unquoted objects:
                    //
                    // - as_is: unquoted object names are kept unquoted
                    // - upper: unquoted object names are turned into upper case (most databases)
                    // - lower: unquoted object names are turned into lower case (e.g. PostgreSQL)
                    property {
                        key = "defaultNameCase"
                        value = "as_is"
                    }
                }
            }
        }
    }
}

dependencies {
    implementation(project(":example-domain:domain"))
    implementation(project(":example-domain:core"))

    // ## ktor core ##
    implementation(libs.ktor.server.core.jvm)

    // ## Functional Programming ##
    implementation(libs.arrow.core)

    // ## DB ##
    implementation(libs.jooq.kotlin)
    implementation(libs.jooq.kotlin.coroutines)

    // Required to work with datetime in DB
    implementation(libs.hikari.cp)
    implementation(libs.mysql.connector.java)

    // Flyway
    implementation(libs.flyway.core)
    implementation(libs.flyway.mysql)

    // JOOQ code generator
    jooqCodegen("org.jooq:jooq-meta-extensions:3.19.10")
    implementation(libs.jooq.kotlin.coroutines)
    implementation(libs.jooq.kotlin)

    // ## Testing ##
    testImplementation(libs.kotlin.test.junit)
}
