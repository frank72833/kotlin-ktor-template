package com.fsn.template.application.transaction.adapter.response

import com.fsn.template.application.configuration.BigDecimalSerializer
import com.fsn.template.application.configuration.CurrencySerializer
import com.fsn.template.application.configuration.HttpStatusCodeSerializer
import com.fsn.template.application.configuration.InstantSerializer
import com.fsn.template.application.configuration.UuidSerializer
import com.fsn.template.domain.transaction.Transaction
import io.ktor.http.HttpStatusCode
import kotlinx.serialization.Serializable
import java.math.BigDecimal
import java.time.Instant
import java.util.Currency
import java.util.UUID

/**
 * CREATE Response
 * Typically generated by Open API plugin
 */
@Serializable
data class CreateTransactionResponse(
    @Serializable(with = HttpStatusCodeSerializer::class)
    val statusCode: HttpStatusCode,
    val data: CreateTransactionResponseData,
)

@Serializable
data class CreateTransactionResponseData(
    @Serializable(with = UuidSerializer::class)
    val id: UUID,
    @Serializable(with = UuidSerializer::class)
    val fromAccountId: UUID,
    @Serializable(with = UuidSerializer::class)
    val toAccountId: UUID,
    @Serializable(with = BigDecimalSerializer::class)
    val amount: BigDecimal,
    @Serializable(with = CurrencySerializer::class)
    val currencyCode: Currency,
    @Serializable(with = InstantSerializer::class)
    val businessDateTime: Instant
)

fun Transaction.toCreateTransactionResponse(statusCode: HttpStatusCode): CreateTransactionResponse =
    CreateTransactionResponse(
        statusCode = statusCode,
        data =
        CreateTransactionResponseData(
            id = id.value,
            fromAccountId = fromAccountId.value,
            toAccountId = toAccountId.value,
            amount = amount,
            currencyCode = currency,
            businessDateTime = businessDateTime,
        ),
    )

/**
 * GET Response
 * Typically generated by Open API plugin
 */
@Serializable
data class GetTransactionResponse(
    @Serializable(with = HttpStatusCodeSerializer::class)
    val statusCode: HttpStatusCode,
    val data: List<GetTransactionResponseData>,
)

@Serializable
data class GetTransactionResponseData(
    @Serializable(with = UuidSerializer::class)
    val id: UUID,
    @Serializable(with = UuidSerializer::class)
    val fromAccountId: UUID,
    @Serializable(with = UuidSerializer::class)
    val toAccountId: UUID,
    @Serializable(with = BigDecimalSerializer::class)
    val amount: BigDecimal,
    @Serializable(with = CurrencySerializer::class)
    val currencyCode: Currency,
    @Serializable(with = InstantSerializer::class)
    val businessDateTime: Instant,
)

fun List<Transaction>.toGetTransactionResponse(statusCode: HttpStatusCode): GetTransactionResponse =
    GetTransactionResponse(
        statusCode = statusCode,
        data = this.map { tx ->
            GetTransactionResponseData(
                id = tx.id.value,
                fromAccountId = tx.fromAccountId.value,
                toAccountId = tx.toAccountId.value,
                amount = tx.amount,
                currencyCode = tx.currency,
                businessDateTime = tx.businessDateTime,
            )
        }
    )
